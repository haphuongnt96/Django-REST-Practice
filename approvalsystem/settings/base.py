"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
import environ
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
environ.Env.read_env('config/.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-pkpa+#3s8@muc)jo(qu8jswt0!k=*nr1x&0ntyj%0w239oiinw'

ROOT_URLCONF = 'urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wsgi.application'

ALLOWED_HOSTS = str(os.getenv('ALLOWED_HOSTS')).split(';') if os.getenv('ALLOWED_HOSTS') else []

#すべてのアクセスを許可をする(true)で設定
CORS_ORIGIN_ALLOW_ALL = os.getenv('CORS_ORIGIN_ALLOW_ALL') == 'true'

# Custom headers https://githubja.com/ottoyiu/django-cors-headers
# ブラウザーに公開されるHTTPヘッダーのリスト
CORS_EXPOSE_HEADERS = ()
# 実際のリクエストを行うときに使用できる非標準のHTTPヘッダーのリスト
CORS_ALLOW_HEADERS = (
    'x-requested-with',
    'content-type',
    'accept',
    'origin',
    'authorization',
    'x-csrftoken',
    'user-agent',
    'accept-encoding',
    'user-timezone'
)
# CORS許可するアクセスの指定（djangoが別サーバでもアクセスできるための指定）
CORS_ALLOWED_ORIGINS = str(os.getenv('CORS_ALLOWED_ORIGINS')).split(';') if os.getenv('CORS_ALLOWED_ORIGINS') else []

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'utils.middlewares.log_middleware.LogMiddleware',
]

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_USER_MODEL = 'users.User'

# パスワードのバリデーター要件設定
AUTH_PASSWORD_VALIDATORS = [
    {
        # username, first_name, last_name, email と類似しているかどうかを検証してくれるclass
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        # パスワードの最小の長さを設定できる
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        # よくあるパスワードのリスト.txtと一致したらエラー出す
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        # usersモデルで設定しているパスワード3種類以上必要のチェック
        'NAME': 'users.models.AlphabetTypePasswordValidator',
    },
]

# rest_framework config　

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # デフォルトの認証をJWTにするSimple JWTの読み込み
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # リクエスト元のユーザーや署名に使用されたトークンなどの一連の識別資格情報に関連付ける
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # パーミッションチェックは、他のコードの処理が許可される前に、常にビューの開始時に実行されます
        # https://runebook.dev/ja/docs/django_rest_framework/api-guide/permissions/index
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_RENDERER_CLASSES': [
        # utilsで設定したJson形式に変更
        # https://www.django-rest-framework.org/api-guide/renderers/
        'utils.renderers.CustomJsonRenderer',
    ],
    #日付と日付時間のデータ型を指定
    'DATE_FORMAT': os.getenv('DATE_FORMAT', '%Y/%m/%d'),
    'DATETIME_FORMAT': os.getenv('DATETIME_FORMAT', '%Y/%m/%d %H:%M:%S')
}

# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html
SIMPLE_JWT = {
    #アクセストークンの有効時間を指定する
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('ACCESS_TOKEN_LIFETIME', 5))),
    #更新トークンの有効期間を指定する
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(os.getenv('REFRESH_TOKEN_LIFETIME', 1))),
    #更新トークンがに送信される TokenRefreshViewと、新しい更新トークンが新しいアクセストークンとともに返されます
    'ROTATE_REFRESH_TOKENS': True,
    # 送信された更新トークンが ブラックリストに追加されます
    'BLACKLIST_AFTER_ROTATION': True,
    # auth_userテーブルのlast_loginフィールドがログイン時に更新しない（？なんで？）
    'UPDATE_LAST_LOGIN': False,

    # 暗号化方式
    'ALGORITHM': 'HS256',
    # 生成されたトークンのコンテンツに署名するために使用される署名キー
    # 開発者はこの設定をdjangoプロジェクトの秘密鍵から独立した値に変更することをお勧めします(?いつ変更?)
    'SIGNING_KEY': SECRET_KEY,
    # 生成されたトークンの内容を検証するために使用される検証キー
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    # 有効期限にある程度のマージンを与えるために使用
    'LEEWAY': 0,

    # 認証が必要なビューで受け入れられる許可ヘッダータイプ
    'AUTH_HEADER_TYPES': ('Bearer',),
    # 認証に使用される許可ヘッダー名
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    # ユーザーを識別するために生成されたトークンに含まれるユーザーモデルのデータベースフィールド
    'USER_ID_FIELD': 'id',
    # 生成されたトークンにユーザーの識別子を含む「user_id」が含まれる
    'USER_ID_CLAIM': 'user_id',
    # ユーザーが認証を許可されているかどうかを判断するために呼び出すことができます
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    # 認証を証明できるトークンのタイプを指定
    'AUTH_TOKEN_CLASSES': ('users.models.JWTAccessToken',),
    # トークンのタイプを格納するために使用されるクレーム名
    'TOKEN_TYPE_CLAIM': 'token_type',
}


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

DATE_FORMAT = '%Y/%m/%d'
DATETIME_FORMAT = '%Y/%m/%d %H:%M:%S'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

APPEND_SLASH = True

# Login/Logout redirect url
# LOGIN_REDIRECT_URL = '/'
# LOGOUT_REDIRECT_URL = '/'

ENVIRONMENT = os.getenv('ENVIRONMENT')
WEBSITE_URL = os.getenv('WEBSITE_URL')
